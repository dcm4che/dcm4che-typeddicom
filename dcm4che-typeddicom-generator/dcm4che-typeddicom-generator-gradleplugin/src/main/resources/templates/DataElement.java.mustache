// Auto generated
package org.dcm4che.typeddicom.dataelements;

import org.dcm4che.typeddicom.AbstractAttributesWrapper;
import org.dcm4che.typeddicom.AttributesWrapper;
{{#value.sequence}}
import org.dcm4che.typeddicom.AbstractSequenceItemWrapper;
import org.dcm4che.typeddicom.SequenceWrapper;
import org.dcm4che3.data.Attributes;
import org.dcm4che3.data.Sequence;
{{/value.sequence}}
{{^value.sequence}}
import org.dcm4che.typeddicom.AbstractDataElementWrapper;
import org.dcm4che.typeddicom.valuerepresentations.{{value.valueRepresentationWrapper}};
import org.dcm4che3.data.Attributes;
{{/value.sequence}}
import org.dcm4che3.data.Tag;
{{#value.sequence}}

import java.util.Arrays;
{{/value.sequence}}

{{{value.classJavaDoc}}}
{{#value.retired}}
@Deprecated
{{/value.retired}}
public class {{key}} extends {{#value.sequence}}SequenceWrapper<{{key}}, {{key}}.Item>{{/value.sequence}}{{^value.sequence}}AbstractDataElementWrapper implements {{value.valueRepresentationWrapper}}{{/value.sequence}} {
    /**
     * The <a href="https://dicom.nema.org/medical/dicom/current/output/chtml/part05/sect_7.8.html">Private Creator</a> 
     * associated with this class.
     */
    public static final String PRIVATE_CREATOR = null;
    /**
     * The <a href="https://dicom.nema.org/medical/dicom/current/output/chtml/part06/chapter_6.html">DICOM Tag</a> 
     * associated with this class.
     */
    public static final int TAG = {{value.tagConstant}};
{{^value.sequence}}

    /**
     * Creates a new {{value.name}} object which wraps the provided <code>attributes</code>.
     *
     * @param attributes The {@link Attributes} object to be wrapped.
     */
    public {{key}}(Attributes attributes) {
        super(attributes);
    }

    /**
     * Creates a new {{value.name}} object which wraps a new and empty {@link Attributes} object.
     */
    public {{key}}() {
        super();
    }
    
    /**
     * Returns a new {{value.name}} which wraps a copy of the Attributes wrapped in this {{value.name}}. (see {@link Attributes#Attributes(Attributes)}
     *
     * @return a new {{value.name}} which wraps a copy of the Attributes wrapped in this {{value.name}}. 
     */
    public {{key}} copy() {
        return super.copy({{key}}.class);
    }

{{/value.sequence}}
{{#value.sequence}}

    /**
     * Creates a new {{value.name}} object which wraps the provided <code>sequence</code>.
     *
     * @param sequence The {@link Sequence} object to be linked.
     */
    public {{key}}(Sequence sequence) {
        super(sequence, {{key}}.Item.class);
    }
{{/value.sequence}}

    @Override
    public String getPrivateCreator() {
        return PRIVATE_CREATOR;
    }

    @Override
    public int getTag() {
        return TAG;
    }
{{#value.sequence}}

    public static class Item extends AbstractSequenceItemWrapper {{^value.contains.isEmpty}}implements {{{value.implementsHolderInterfaces}}} {{/value.contains.isEmpty}}{
        /**
         * @return a {@link Builder} to create {{value.name}} Items with a fluent API.
         */
        public static Builder builder() { 
            return new Builder(); 
        }

        /**
         * @param attributes The Attributes to be wrapped by the {@link Builder}.
         *
         * @return a {@link Builder} to create {{value.name}} Items with a fluent API. Instead of creating new Attributes it wraps the provided Attributes.
         */
        public static Builder builder(Attributes attributes) { 
            return new Builder(attributes); 
        }

        /**
         * Creates a new {{value.name}} Item object which wraps the provided <code>attributes</code>.
         *
         * @param attributes The {@link Attributes} object to be wrapped.
         */
        public Item(Attributes attributes) {
            super(attributes);
        }

        /**
         * Creates a new {{value.name}} Item object which wraps a new and empty {@link Attributes} object.
         */
        public Item() {
            super();
        }

        /**
         * Returns a new {{value.name}} Item which wraps a copy of the Attributes wrapped in this {{value.name}}. (see {@link Attributes#Attributes(Attributes)}
         *
         * @return a new {{value.name}} Item which wraps a copy of the Attributes wrapped in this {{value.name}}. 
         */
        public Item copy() {
            return super.copy(Item.class);
        }
        
        public static class Builder extends AbstractAttributesWrapper implements org.dcm4che.typeddicom.Builder<Builder, Item>{{^value.contains.isEmpty}}, {{{value.implementsBuilderInterfaces}}} {{/value.contains.isEmpty}}{
            private Builder() {
                super();
            }

            private Builder(Attributes attributes) {
                super(attributes);
            }

            @Override
            public Item build() {
                return super.copy(Item.class);
            }
        }
    }
{{/value.sequence}}
    
    /**
     * A class implementing this interface can hold attributes which contain the DICOM tag "{{value.name}}" (see {@link {{key}}})
     */
    public interface Holder extends AttributesWrapper {
        /**
         * @param attributes An attributes object containing the {{value.name}} (see {@link {{key}}})
         * @return A wrapper object implementing the {@link Holder} interface. 
         */
        static Holder wrap(Attributes attributes) {
            return AttributesWrapper.wrap(attributes, SimpleHolder.class);
        }

        /**
         * @return a {@link Builder} to create {{value.name}} Items with a fluent API.
         */
        static Builder builder() { 
            return new Builder(); 
        }

        /**
         * @param attributes The Attributes to be wrapped by the {@link Builder}.
         *
         * @return a {@link Builder} to create {{value.name}} Items with a fluent API. Instead of creating new Attributes it wraps the provided Attributes.
         */
        static Builder builder(Attributes attributes) { 
            return new Builder(attributes); 
        }

        /**
         * @return the {{value.name}} (see {@link {{key}}})
         */
        default {{key}} get{{key}}() {
        {{#value.sequence}}
            Sequence sequence = getAttributes().getSequence(PRIVATE_CREATOR, TAG);
            if (sequence == null) {
                return null;
            }
            return new {{key}}(sequence);
        {{/value.sequence}}
        {{^value.sequence}}
            return new {{key}}(getAttributes());
        {{/value.sequence}}
        }

        {{#value.sequence}}
        /**
         * Adds a new {{value.name}}. (see {@link {{key}}})
         *
         * @param initialCapacity the initial capacity for the new {{value.name}}
         */
        default {{key}} new{{key}}(int initialCapacity) {
            return new {{key}}(getAttributes().newSequence(PRIVATE_CREATOR, TAG, initialCapacity));
        }

        /**
         * Adds a new {{value.name}} (see {@link {{key}}}) if it does not already exist.
         * (see {@link Attributes#ensureSequence(int, int)}
         *
         * @param initialCapacity The initial capacity (see {@link java.util.ArrayList#ArrayList(int)}) if a new 
         *                        {{value.name}} is created.
         * @return Either the already existing {{value.name}} (see {@link {{key}}}) or a new one with capacity 
         *         <code>initialCapacity</code>.
         */
        default {{key}} ensure{{key}}(int initialCapacity) {
            return new {{key}}(getAttributes().ensureSequence(PRIVATE_CREATOR, TAG, initialCapacity));
        }

        /**
         * Adds a new {{value.name}} (see {@link {{key}}}) with initial capacity 1 (see {@link #ensure{{key}}(int)})
         * if it does not already exist.
         *
         * @return Either the already existing {{value.name}} (see {@link {{key}}}) or a new one with capacity 1.
         */
        default {{key}} ensure{{key}}() {
            return ensure{{key}}(1);
        }

        {{/value.sequence}}
        /**
         * @return Whether it contains the {{value.name}} (see {@link {{key}}})
         */
        default boolean contains{{key}}() {
            return getAttributes().contains(PRIVATE_CREATOR, TAG);
        }

        /**
         * Removes the {{value.name}} (see {@link {{key}}}
         */
        default void remove{{key}}() {
            getAttributes().remove(PRIVATE_CREATOR, TAG);
        }

        class Builder extends AbstractAttributesWrapper implements org.dcm4che.typeddicom.Builder<Builder, SimpleHolder>, {{key}}.Builder<Builder, SimpleHolder> {
            private Builder() {
                super();
            }

            private Builder(Attributes attributes) {
                super(attributes);
            }

            @Override
            public SimpleHolder build() {
                return super.copy(SimpleHolder.class);
            }
        }
    }
    
    public static class SimpleHolder extends AbstractAttributesWrapper implements Holder {
        public SimpleHolder(Attributes attributes) {
            super(attributes);
        }
    }
    {{#value.sequence}}

    public interface Builder<SELF extends Builder<SELF, T>, T extends {{key}}.Holder> extends org.dcm4che.typeddicom.Builder<SELF, T> {
        default SELF set{{key}}(Item.Builder... itemBuilders) {
            final SimpleHolder simpleHolder = new SimpleHolder(this.getAttributes());
            simpleHolder.remove{{key}}();
            simpleHolder.new{{key}}(itemBuilders.length);
            for (Item.Builder builder : itemBuilders) {
                simpleHolder.get{{key}}().add(builder.build());
            }            
            return (SELF) this;
        }
    }
    {{/value.sequence}}
    {{^value.sequence}}

    public interface Builder<SELF extends Builder<SELF, T>, T extends {{key}}.Holder> extends org.dcm4che.typeddicom.Builder<SELF, T> {
        /**
         * @return a Setter for the {{value.name}} (see {@link {{key}}}) which returns this Builder
         *         on its .asXXXX() methods. This allows fluent object creation in the form of <br>
         *         {@code XXXIOD xxxIOD = new XXXIOD().setYYYY().asYYYY(xxxxValue).setZZZZ().asZZZZ(zzzzValue);}
         */
        default {{value.valueRepresentationWrapper}}.Setter<SELF, {{key}}> set{{key}}() {
            return new {{value.valueRepresentationWrapper}}.Setter<>((SELF) this, new {{key}}(this.getAttributes()));
        }
    }
    {{/value.sequence}}
}
