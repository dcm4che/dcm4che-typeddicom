// Auto generated
package org.dcm4che.typeddicom.iods;

import org.dcm4che.typeddicom.SOPClass;
import org.dcm4che3.data.Attributes;
import org.dcm4che.typeddicom.AbstractAttributesWrapper;
import org.dcm4che.typeddicom.AbstractInformationObjectDefinition;
{{#modules}}
import org.dcm4che.typeddicom.modules.{{.}};
{{/modules}}

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

/**
 * <strong>Name:</strong> {{name}} <br>
 * <strong>Description:</strong> {{{description}}} <br>
 *
 * @see <a href="{{href}}">DICOM Standard Part 5 - {{name}}</a>
 */
public class {{keyword}} extends AbstractInformationObjectDefinition implements {{{implementsModules}}} {
    public static final Set<SOPClass> STANDARD_SOP_CLASSES;
    static {
        Set<SOPClass> sopClasses = new HashSet<>();
        {{#sopClasses}}
        sopClasses.add(new SOPClass("{{name}}", "{{uid}}"));
        {{/sopClasses}}
        STANDARD_SOP_CLASSES = Collections.unmodifiableSet(sopClasses);
    }

    /**
     * @return a {@link Builder} to create {{name}}s with a fluent API.
     */
    public static Builder builder() {
        return new Builder();
    }

    /**
     * @param attributes the Attributes to be wrapped by the {@link Builder}.
     *
     * @return a {@link Builder} to create {{name}} Items with a fluent API. Instead of creating new Attributes it wraps the provided Attributes.
     */
    public static Builder builder(Attributes attributes) {
        return new Builder(attributes);
    }

    public {{keyword}}(Attributes attributes) {
        super(attributes);
    }

    public {{keyword}}() {
        super();
    }

    public Set<SOPClass> getStandardSOPClasses() {
        return STANDARD_SOP_CLASSES;
    }

    public static class Builder extends AbstractAttributesWrapper implements {{{implementsModuleBuilders}}} {
        private Builder() {
            super();
        }

        private Builder(Attributes attributes) {
            super(attributes);
        }

        @Override
        public {{keyword}} build() {
            return super.copy({{keyword}}.class);
        }
    }
}
