# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Publish dcm4che-typeddicom
on:
  release:
    types: [created]
jobs:
  publish:
    environment: publishToDcm4cheMaven
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Build package
        run: gradle build

      - name: Upload release assets
        uses: actions/github-script@v2
        with:
          github-token: ${{github.token}}
          script: |
            console.log('environment', process.versions);
            
            const fs = require('fs').promises;
            
            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });
            
            var fs = require('fs');
            
            const publishableSubProjects = [
              'dcm4che-typeddicom-skeleton',
              'dcm4che-typeddicom-lib/dcm4che-typeddicom-lib-std',
              'dcm4che-typeddicom-parser/dcm4che-typeddicom-parser-dtos',
              'dcm4che-typeddicom-generator/dcm4che-typeddicom-java-generator-lib',
              'dcm4che-typeddicom-generator/dcm4che-typeddicom-java-generator-gradleplugin'
            ];
            for (project of publishableSubProjects) {
              fs.readdir("./" + project + '/build/libs', (err, files) => {
                if (err) {
                  console.log(err);
                } else {
                  files.forEach(file => {
                    // do whatever filtering you want here, I'm just uploading all the files
                    const releaseAssetName = file.replace(/(.*?)(-\d+\.\d+\.\d+(-SNAPSHOT)?)?(-(javadoc|sources))?.jar/, "$1/$1-${{ steps.get_release.outputs.tag_name }}$4.jar");
                  
                    console.log('uploading ' + file + ' > ' + releaseAssetName);
                    await github.repos.uploadReleaseAsset({
                      owner,
                      repo,
                      release_id: steps.get_release.outputs.id,
                      name: releaseAssetName,
                      data: await fs.readFile(`./${file}`)
                    });
                  });
                }
              });
            }

      - name: Publish package to dcm4che Maven Repository
        run: gradle publishAllPublicationsToDcm4cheMavenRepository
        env:
          ORG_GRADLE_PROJECT_dcm4cheMavenUsername: ${{ secrets.DCM4CHE_MAVEN_SSH_USERNAME }}
          ORG_GRADLE_PROJECT_dcm4cheMavenPassword: ${{ secrets.DCM4CHE_MAVEN_SSH_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_PRIVATE_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_KEY_PASSWORD }}
