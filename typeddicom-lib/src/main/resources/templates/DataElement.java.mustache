// Auto generated
package com.agfa.typeddicom.dataelements;

import com.agfa.typeddicom.AttributesWrapper;
{{#sequence}}
import com.agfa.typeddicom.AbstractAttributesWrapper;
import com.agfa.typeddicom.SequenceWrapper;
import org.dcm4che3.data.Attributes;
import org.dcm4che3.data.Sequence;
import org.dcm4che3.data.Tag;
{{/sequence}}
{{^sequence}}
import com.agfa.typeddicom.valuerepresentations.AbstractDataElementWrapper;
import com.agfa.typeddicom.valuerepresentations.{{valueRepresentationWrapper}};
import org.dcm4che3.data.Attributes;
{{/sequence}}
import org.dcm4che3.data.VR;
import org.dcm4che3.data.Tag;


/**
 * <strong>Name:</strong> {{name}}<br/>
 * <strong>Keyword:</strong> {{keyword}}<br/>
 * <strong>Tag:</strong> {{tag}}<br/>
 * <strong>Value Representation:</strong> {{valueRepresentation}}<br/>
 * <strong>Value Multiplicity:</strong> {{valueMultiplicity}}<br/>
{{#comment}}
 * <strong>Comment:</strong> {{.}}
{{/comment}}
{{#contextsOfAdditionalAttributeInfo}}
{{> AdditionalAttributeInfoInContext}}
{{/contextsOfAdditionalAttributeInfo}}
{{#retired}}
 *
 * @deprecated {{comment}}
{{/retired}}
 */
{{#retired}}
@Deprecated
{{/retired}}
public class {{keyword}} extends {{#sequence}}SequenceWrapper<{{keyword}}.Item>{{/sequence}}{{^sequence}}AbstractDataElementWrapper implements {{valueRepresentationWrapper}}{{/sequence}} {
    public static final VR VALUE_REPRESENTATION = VR.{{valueRepresentation}};
    public static final int TAG = {{tagConstant}};

{{^sequence}}
    public {{keyword}}(Attributes attributes) {
        super(attributes);
    }

    @Override
    public int getTag() {
        return TAG;
    }

    @Override
    public VR getValueRepresentation() {
        return VALUE_REPRESENTATION;
    }
{{/sequence}}
{{#sequence}}

    public {{keyword}}(Sequence sequence) {
        super(sequence, {{keyword}}.Item.class);
    }

    public static class Item extends AbstractAttributesWrapper {{^subDataElementMetaInfos.isEmpty}}implements {{implementsAccessorInterfaces}} {{/subDataElementMetaInfos.isEmpty}}{

        public Item(Attributes attributes) {
            super(attributes);
        }
    }
{{/sequence}}

    public interface Accessors extends AttributesWrapper {

        /**
         *
         * @return the {{name}} (see {@link {{keyword}}})
         */
        default {{keyword}} get{{keyword}}() {
        {{#sequence}}
            Sequence sequence = getAttributes().getSequence(TAG);
            if (sequence == null) {
                return null;
            }
            return new {{keyword}}(sequence);
        {{/sequence}}
        {{^sequence}}
            return new {{keyword}}(getAttributes());
        {{/sequence}}
        }

        {{#sequence}}
        /**
         * @return Whether it contains a {{name}} (see {@link {{keyword}}})
         */
         default boolean contains{{keyword}}() {
            return getAttributes().contains(TAG);
         }

        /**
         * Adds a new {{name}}. (see {@link {{keyword}}})
         *
         * @param initialCapacity the initial capacity for the new {{name}}
         */
        default {{keyword}} new{{keyword}}(int initialCapacity) {
            return new {{keyword}}(getAttributes().newSequence(TAG, initialCapacity));
        }

        /**
         * Adds a new {{name}} if it does not already exist. (see {@link {{keyword}}})
         *
         * @param initialCapacity the initial capacity if a new {{name}} is created
         */
        default {{keyword}} ensure{{keyword}}(int initialCapacity) {
            return new {{keyword}}(getAttributes().ensureSequence(TAG, initialCapacity));
        }

        {{/sequence}}
        /**
         * @param value the {{name}} (see {@link {{keyword}}}
         */
        default void remove{{keyword}}({{keyword}} value) {
            getAttributes().remove(TAG);
        }
    }
}
