// Auto generated
package com.agfa.typeddicom.dataelements;

import com.agfa.typeddicom.AttributesWrapper;
{{#sequence}}
import com.agfa.typeddicom.AbstractAttributesWrapper;
import com.agfa.typeddicom.SequenceWrapper;
import org.dcm4che3.data.Attributes;
import org.dcm4che3.data.Sequence;
import org.dcm4che3.data.Tag;
{{/sequence}}
{{^sequence}}
import com.agfa.typeddicom.valuerepresentations.AbstractDataElementWrapper;
import com.agfa.typeddicom.valuerepresentations.{{valueRepresentationWrapper}};
import java.util.TimeZone;
{{/sequence}}
import org.dcm4che3.data.VR;
import org.dcm4che3.data.Tag;


/**
 * <strong>Name:</strong> {{name}}<br/>
 * <strong>Keyword:</strong> {{keyword}}<br/>
 * <strong>Tag:</strong> {{tag}}<br/>
 * <strong>Value Representation:</strong> {{valueRepresentation}}<br/>
 * <strong>Value Multiplicity:</strong> {{valueMultiplicity}}<br/>
{{#comment}}
 * <strong>Comment:</strong> {{.}}
{{/comment}}
{{#contextsOfAdditionalAttributeInfo}}
{{> AdditionalAttributeInfoInContext}}
{{/contextsOfAdditionalAttributeInfo}}
{{#retired}}
 *
 * @deprecated {{comment}}
{{/retired}}
 */
{{#retired}}
@Deprecated
{{/retired}}
public class {{keyword}} extends {{#sequence}}SequenceWrapper<{{keyword}}.Item>{{/sequence}}{{^sequence}}AbstractDataElementWrapper implements {{valueRepresentationWrapper}}{{/sequence}} {
    public static final VR valueRepresentation = VR.{{valueRepresentation}};

{{^sequence}}
    public {{keyword}}(Object value, boolean bigEndian, org.dcm4che3.data.SpecificCharacterSet characterSet, TimeZone timeZone) {
        super(value, bigEndian, characterSet, timeZone);
    }

    @Override
    public VR getValueRepresentation() {
        return valueRepresentation;
    }
{{/sequence}}
{{#sequence}}

    public {{keyword}}(Sequence sequence) {
        super(sequence, {{keyword}}.Item.class);
    }

    public static class Item extends AbstractAttributesWrapper {{^subDataElementMetaInfos.isEmpty}}implements {{implementsContainsInterfaces}} {{/subDataElementMetaInfos.isEmpty}}{

        public Item(Attributes attributes) {
            super(attributes);
        }
    }
{{/sequence}}

    public interface Accessors extends AttributesWrapper {
        /**
         *
         * @return the {{name}} (see {@link {{keyword}}}
         */
        default {{keyword}} get{{keyword}}() {
        {{#sequence}}
            return new {{keyword}}(getAttributes().getSequence({{tagConstant}}));
        {{/sequence}}
        {{^sequence}}
            return new {{keyword}}(getAttributes().getValue({{tagConstant}}), getAttributes().bigEndian(), getAttributes().getSpecificCharacterSet(), getAttributes().getTimeZone());
        {{/sequence}}
        }

        /**
         * @param value the {{name}} (see {@link {{keyword}}}
         */
        default void set{{keyword}}({{keyword}} value) {
        {{#sequence}}
            getAttributes().setValue({{tagConstant}}, {{keyword}}.valueRepresentation, value.getSequence());
        {{/sequence}}
        {{^sequence}}
            getAttributes().setValue({{tagConstant}}, {{keyword}}.valueRepresentation, value.getValue());
        {{/sequence}}
        }
    }
}
